# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool: My_Agent

steps:
- powershell: |
    Write-Host "Bearer $env:SYSTEM_ACCESSTOKEN"
    $url = "$($env:SYSTEM_TEAMFOUNDATIONCOLLECTIONURI)$env:SYSTEM_TEAMPROJECTID/_apis/build/definitions/$($env:SYSTEM_DEFINITIONID)?api-version=4.1-preview"
    ##Write-Host "URL: $url"
    $pipeline = Invoke-RestMethod -Uri $url -Headers @{
      Authorization = "Bearer $env:SYSTEM_ACCESSTOKEN"
    }
    ##Write-Host "Pipeline = $($pipeline | ConvertTo-Json -Depth 100)"

    ## Variables to send mail
    $myorg = “debduttachatterjee09”
    $myproj = “Test_Pipeline”
    $sendmailto = “devbduttachatterjee09@gmail.com” ## comma separated email ids of receivers
    $mysubject = “my custom subject of the mail” ## Subject of the email
    $mailbody = “my custom mail body details” ## mail body

    ## Get tfsids of users whom to send mail
    $mailusers = “$sendmailto”
    $mymailusers = $mailusers -split “,”
    $pat = “Bearer $env:System_AccessToken”
    $myurl =”https://dev.azure.com/${myorg}/_apis/projects/${myproj}/teams?api-version=5.1"
    $data = Invoke-RestMethod -Uri $myurl -Headers @{
      Authorization = "Bearer $env:SYSTEM_ACCESSTOKEN"
    }
    $myteams = $data.value.id
    Write-Host $myteams

    ##Get list of members in all teams
    $myusersarray = @()
    foreach($myteam in $myteams) {
    $usrurl = “https://dev.azure.com/${myorg}/_apis/projects/${myproj}/teams/"+$myteam+"/members?api-version=5.1"
    $userdata = Invoke-RestMethod -Uri $usrurl -Headers @{
      Authorization = "Bearer $env:SYSTEM_ACCESSTOKEN"
    }
    Write-Host $userdata
    $myusers = $userdata.value
    foreach($myuser in $myusers) {
    $myuserid = $myuser.identity.id
    $myusermail = $myuser.identity.uniqueName
    $myuserrecord = $myuserid+”:”+$myusermail
    $myusersarray += $myuserrecord
    }
    }
    Write-Host $myusersarray

    ## filter unique users
    $myfinalusersaray = $myusersarray | sort -Unique
    Write-Host $myfinalusersaray
    ## create final hash of emails and tfsids
    $myusershash = @{}
    for ($i = 0; $i -lt $myfinalusersaray.count; $i++)
    {
    $myusershash[$myfinalusersaray[$i].split(“:”)[1]] = $myfinalusersaray[$i].split(“:”)[0]
    }
    ##
    ## create list of tfsid of mailers
    foreach($mymail in $mymailusers) {
    $myto = $myto +’”’+$myusershash[$mymail]+’”,’
    }
    Write-Host $myto
    
    ##send mail
    $uri = “https://${myorg}.vsrm.visualstudio.com/${myproj}/_apis/Release/sendmail/$(RELEASE.RELEASEID)?api-version=3.2-preview.1"
    ##$uri = "https://dev.azure.com/${myorg}/${myproj}/_apis/wit/sendmail?api-version=7.1-preview.1"
    ##$uri = "https://dev.azure.com/${myorg}/${myproj}/_apis/wit/sendmail?api-version=7.1-preview.1"
    $requestBody =
    @”
    {
    “senderType”:1,
    “to”:{“tfsIds”:[$myto]},
    “body”:”${mailbody}”,
    “subject”:”${mysubject}”
    }
    “@
    Try {
    $data =Invoke-RestMethod -Uri $uri -Body $requestBody -Method POST -Headers @{
      Authorization = "Bearer $env:SYSTEM_ACCESSTOKEN"
    } -ContentType “application/json”
    Write-Host $data
    }
    
    Catch {
    $_.Exception
    }

  env:
    SYSTEM_ACCESSTOKEN: $(system.accesstoken)